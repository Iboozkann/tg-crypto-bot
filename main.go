package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var cryptoList = map[string]string{
	"bitcoin":  "BTC",
	"ethereum": "ETH",
	"solana":   "SOL",
	"ripple":   "XRP",
}

func main() {
	bot, err := tgbotapi.NewBotAPI("7509451523:AAGul5K56c_HIxxNQyJIoJwMWPlwm_f_tn0") // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			if update.CallbackQuery != nil {
				handleCallback(bot, update.CallbackQuery)
			}
			continue
		}

		chatID := update.Message.Chat.ID

		switch update.Message.Text {
		case "/start":
			sendMainMenu(bot, chatID)
		case "–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç üìä":
			sendCryptoPrices(bot, chatID)
		case "–ü–æ–º–æ—â—å ‚ÑπÔ∏è":
			sendHelp(bot, chatID)
		default:
			msg := tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start")
			bot.Send(msg)
		}
	}
}

func sendMainMenu(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "üí∞ <b>–ö—Ä–∏–ø—Ç–æ—Ç—Ä–µ–∫–µ—Ä</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç üìä"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü–æ–º–æ—â—å ‚ÑπÔ∏è"),
		),
	)
	bot.Send(msg)
}

func sendHelp(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"+
		"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n"+
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç üìä</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω.\n\n"+
		"–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start")
	msg.ParseMode = "HTML"
	bot.Send(msg)
}

func handleCallback(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	if callback.Data == "refresh" {
		sendCryptoPrices(bot, callback.Message.Chat.ID, callback.Message.MessageID)
	}
}

func sendCryptoPrices(bot *tgbotapi.BotAPI, chatID int64, messageID ...int) {
	type Coin struct {
		Price float64 `json:"usd"`
	}

	coins := make([]string, 0, len(cryptoList))
	for coin := range cryptoList {
		coins = append(coins, coin)
	}
	apiUrl := fmt.Sprintf("https://api.coingecko.com/api/v3/simple/price?ids=%s&vs_currencies=usd", strings.Join(coins, ","))

	resp, err := http.Get(apiUrl)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç CoinGecko üö®"))
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		bot.Send(tgbotapi.NewMessage(chatID, "–°–µ—Ä–≤–∏—Å CoinGecko –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üö®"))
		return
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö üö®"))
		return
	}

	var data map[string]Coin
	if err := json.Unmarshal(body, &data); err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö üö®"))
		return
	}

	var messageText strings.Builder
	messageText.WriteString("üìà <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b>\n\n")

	for id, coin := range cryptoList {
		if priceData, exists := data[id]; exists {
			messageText.WriteString(fmt.Sprintf("‚Ä¢ %s: <b>$%.2f</b>\n", coin, priceData.Price))
		} else {
			messageText.WriteString(fmt.Sprintf("‚Ä¢ %s: <b>–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>\n", coin))
		}
	}
	messageText.WriteString("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: " + time.Now().Format("15:04:05"))

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û–±–Ω–æ–≤–∏—Ç—å ‚ôªÔ∏è", "refresh"),
		),
	)

	if len(messageID) > 0 {
		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID[0], messageText.String())
		editMsg.ParseMode = "HTML"
		editMsg.ReplyMarkup = &inlineKeyboard
		_, err := bot.Send(editMsg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	} else {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		msg := tgbotapi.NewMessage(chatID, messageText.String())
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = inlineKeyboard
		_, err := bot.Send(msg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	}
}
